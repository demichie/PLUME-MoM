%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/demichie/Codes/PLUME-MoM-multigas/EXAMPLES/example_run_inv.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/02/22 19:23:39

%% Initialize variables.

clear all;
[filename, pathname] = uigetfile( '*.inv','Pick a file');

startRow = 2;

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: text (%s)
%	column6: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%17f%17f%16f%16f%5s%f%[^\n\r]';

%% Open the text file.
fileID = fopen(strcat(pathname,filename),'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Remove white space around all cell columns.
dataArray{5} = strtrim(dataArray{5});

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
inversion = table(dataArray{1:end-1}, 'VariableNames', {'radius','velocity','MER','plumeheight','flag','regime'});

%% Clear temporary variables
clearvars filename startRow formatSpec fileID dataArray ans;

figure;

idx = find(inversion.flag=="T");
plotyy(inversion.radius(idx),inversion.velocity(idx),inversion.radius(idx),inversion.MER(idx));

hold on

% idxF = find(inversion.flag=="F");
% 
% 
% plot(ax(1),inversion.radius(idxF),inversion.velocity(idxF))
% 
% xlim([1,500]);

idx1 = intersect(idx,find(inversion.regime==1));
plot(inversion.radius(idx1),inversion.velocity(idx1),'o');

idx2 = intersect(idx,find(inversion.regime==2));
plot(inversion.radius(idx2),inversion.velocity(idx2),'x');

idx3 = intersect(idx,find(inversion.regime==3));
plot(inversion.radius(idx3),inversion.velocity(idx3),'+');

% axes(ax(2))
% xlim([1,500]);



